import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useSubscription } from '@/contexts/SubscriptionContext';
import { useDataExports } from '@/hooks/useDataExports';
import { useToast } from '@/hooks/use-toast';
import { GSCService, GSCDataPoint } from '@/lib/gscService';
import { OpenAIService } from '@/lib/openAIService';
import { ExportService } from '@/lib/exportService';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { 
  TrendingUp, 
  TrendingDown, 
  Eye, 
  MousePointer, 
  Target, 
  Search, 
  Download, 
  Share2, 
  ExternalLink,
  Loader2,
  AlertCircle,
  CheckCircle,
  FileText,
  Bot,
  Calendar,
  BarChart3,
  Activity,
  Lightbulb
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { DataLoadingOverlay } from '../DataLoadingOverlay';
import { subDays, subWeeks, format, startOfWeek, endOfWeek, eachWeekOfInterval } from 'date-fns';

// Enhanced interfaces for the new Top Gainers implementation
interface TopGainerPage {
  url: string;
  pageType: string;
  topQuery: string;
  clicksGained: number;
  ctrImprovement: number;
  positionChange: number;
  currentMetrics: {
    clicks: number;
    impressions: number;
    ctr: number;
    avgPosition: number;
  };
  previousMetrics: {
    clicks: number;
  impressions: number;
  ctr: number;
    avgPosition: number;
  };
  weeklyTrendData: WeeklyTrendData[];
  selected: boolean;
}

interface WeeklyTrendData {
  weekLabel: string;
  clicks: number;
  ctr: number;
  avgPosition: number;
}

interface TopGainersSummary {
  totalGainerPages: number;
  netClicksGained: number;
  avgCtrImprovement: number;
  topGainingPage: TopGainerPage | null;
}

interface AISuccessPatterns {
  patterns: string[];
  nextSteps: string[];
  loading: boolean;
}

interface TopGainersContentProps {
  isActive: boolean;
  onNavigate?: (section: string) => void;
}

// Page type classification patterns (enhanced from existing ClickGap component)
const PAGE_TYPE_PATTERNS = [
  { pattern: /^\/$|^\/home/i, type: 'Homepage' },
  { pattern: /\/blog\/|\/article\/|\/post\//i, type: 'Blog' },
  { pattern: /\/product\/|\/products\//i, type: 'Product Page' },
  { pattern: /\/service\/|\/services\//i, type: 'Service Page' },
  { pattern: /\/pricing/i, type: 'Pricing' },
  { pattern: /\/guide\/|\/how-to\/|\/tutorial\//i, type: 'Guide' },
  { pattern: /\/about/i, type: 'About' },
  { pattern: /\/contact/i, type: 'Contact' },
  { pattern: /\/category\/|\/categories\//i, type: 'Category' },
  { pattern: /\/tag\/|\/tags\//i, type: 'Tag' },
  { pattern: /\/landing\/|\/lp\//i, type: 'Landing Page' },
  { pattern: /\/resource\/|\/resources\//i, type: 'Resource' },
];

const detectPageType = (url: string): string => {
  for (const { pattern, type } of PAGE_TYPE_PATTERNS) {
    if (pattern.test(url)) {
      return type;
    }
  }
  return 'Other';
};

// Date calculation utilities
const calculateDateRanges = () => {
  const now = new Date();
  
  // Current Period: Last 3 full months from today
  const currentEnd = now;
  const currentStart = new Date(now);
  currentStart.setMonth(currentStart.getMonth() - 3);
  
  // Previous Period: The 3 months immediately before that
  const previousEnd = new Date(currentStart);
  previousEnd.setDate(previousEnd.getDate() - 1); // End day before current period starts
  const previousStart = new Date(previousEnd);
  previousStart.setMonth(previousStart.getMonth() - 3);
  
  // 6 months for weekly trend data
  const trendStart = new Date(now);
  trendStart.setMonth(trendStart.getMonth() - 6);
  
  return {
    current: {
      startDate: format(currentStart, 'yyyy-MM-dd'),
      endDate: format(currentEnd, 'yyyy-MM-dd')
    },
    previous: {
      startDate: format(previousStart, 'yyyy-MM-dd'),
      endDate: format(previousEnd, 'yyyy-MM-dd')
    },
    trend: {
      startDate: format(trendStart, 'yyyy-MM-dd'),
      endDate: format(now, 'yyyy-MM-dd')
    }
  };
};

export function TopGainersContent({ isActive, onNavigate }: TopGainersContentProps) {
  const { user, getGSCToken, getGSCProperty } = useAuth();
  const { subscriptionType } = useSubscription();
  const { trackExport } = useDataExports();
  const { toast } = useToast();
  
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [progressMessage, setProgressMessage] = useState('');
  const [topGainerPages, setTopGainerPages] = useState<TopGainerPage[]>([]);
  const [summary, setSummary] = useState<TopGainersSummary | null>(null);
  const [aiPatterns, setAiPatterns] = useState<AISuccessPatterns>({ patterns: [], nextSteps: [], loading: false });
  const [error, setError] = useState<string | null>(null);

  const gscService = new GSCService();
  const openAIService = new OpenAIService();

  // Calculate filtered and selected pages
  const selectedPages = topGainerPages.filter(page => page.selected);
  const topPages = useMemo(() => topGainerPages.slice(0, 5), [topGainerPages]);

  // Main data loading function implementing all 6 steps
  const loadTopGainersData = async () => {
    setLoading(true);
    setError(null);
    setProgress(0);
    setProgressMessage('Initializing Top Gainers analysis...');
    
    try {
      const gscProperty = getGSCProperty();
      const token = getGSCToken();
      
      if (!gscProperty || !token) {
        throw new Error('Google Search Console not connected');
      }

      const dateRanges = calculateDateRanges();
      
      // Step 1: Fetch GSC Data
      setProgress(10);
      setProgressMessage('Step 1: Fetching GSC data for both time periods...');
      
      const [currentData, previousData] = await Promise.all([
        // Current period: last 3 months
        gscService.fetchSearchAnalyticsData({
        siteUrl: gscProperty,
          startDate: dateRanges.current.startDate,
          endDate: dateRanges.current.endDate,
        dimensions: ['page', 'query'],
        rowLimit: 25000
        }),
        // Previous period: 3 months before that
        gscService.fetchSearchAnalyticsData({
        siteUrl: gscProperty,
          startDate: dateRanges.previous.startDate,
          endDate: dateRanges.previous.endDate,
        dimensions: ['page', 'query'],
        rowLimit: 25000
        })
      ]);

      setProgress(30);
      setProgressMessage('Step 2: Processing data and calculating deltas...');

      // Step 2: Calculate Deltas and process page data
      const pageDataCurrent = groupDataByPage(currentData);
      const pageDataPrevious = groupDataByPage(previousData);
      
      const gainerPagesData: TopGainerPage[] = [];
      
      // Calculate deltas for each page
      for (const [pageUrl, currentMetrics] of Object.entries(pageDataCurrent)) {
        const previousMetrics = pageDataPrevious[pageUrl] || { clicks: 0, impressions: 0, ctr: 0, avgPosition: 100 };
        
        const clicksGained = currentMetrics.clicks - previousMetrics.clicks;
        
        // Only include pages with positive clicks delta
        if (clicksGained > 0) {
          const ctrImprovement = currentMetrics.ctr - previousMetrics.ctr;
          const positionChange = previousMetrics.avgPosition - currentMetrics.avgPosition; // Positive = improvement
          
          gainerPagesData.push({
            url: pageUrl,
            pageType: detectPageType(pageUrl),
            topQuery: '', // Will be populated in step 3
            clicksGained,
            ctrImprovement,
            positionChange,
            currentMetrics,
            previousMetrics,
            weeklyTrendData: [], // Will be populated in step 4
            selected: false
          });
        }
      }

      // Sort by clicks delta descending
      gainerPagesData.sort((a, b) => b.clicksGained - a.clicksGained);

      setProgress(50);
      setProgressMessage('Step 3: Getting top query for each gainer page...');

      // Step 3: Get Top Query Per Page
      for (let i = 0; i < Math.min(gainerPagesData.length, 20); i++) {
        const page = gainerPagesData[i];
        const topQuery = await getTopQueryForPage(page.url, dateRanges.current, gscProperty);
        page.topQuery = topQuery;
      }

      setProgress(70);
      setProgressMessage('Step 4: Generating weekly performance trend data...');

      // Step 4: Generate Weekly Performance Trend Data
      const top5Pages = gainerPagesData.slice(0, 5);
      for (const page of top5Pages) {
        const weeklyData = await getWeeklyTrendData(page.url, dateRanges.trend, gscProperty);
        page.weeklyTrendData = weeklyData;
      }

      setTopGainerPages(gainerPagesData);

      // Generate summary
      const summaryData: TopGainersSummary = {
        totalGainerPages: gainerPagesData.length,
        netClicksGained: gainerPagesData.reduce((sum, page) => sum + page.clicksGained, 0),
        avgCtrImprovement: gainerPagesData.length > 0 
          ? gainerPagesData.reduce((sum, page) => sum + page.ctrImprovement, 0) / gainerPagesData.length 
          : 0,
        topGainingPage: gainerPagesData[0] || null
      };
      
      setSummary(summaryData);

      setProgress(90);
      setProgressMessage('Step 5: Generating AI-powered success patterns...');

      // Step 5: Generate AI-Powered Success Patterns
      if (gainerPagesData.length >= 3) {
        await generateAISuccessPatterns(gainerPagesData.slice(0, Math.min(20, gainerPagesData.length)));
      }

      setProgress(100);
      setProgressMessage('Top Gainers report generated successfully!');
      
    } catch (error) {
      console.error('Error loading Top Gainers data:', error);
      setError(error instanceof Error ? error.message : 'Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  // Helper function to group GSC data by page
  const groupDataByPage = (data: GSCDataPoint[]) => {
    const grouped: Record<string, { clicks: number; impressions: number; ctr: number; avgPosition: number; queryCount: number }> = {};

    for (const item of data) {
      if (!item.page) continue;
      
      if (!grouped[item.page]) {
        grouped[item.page] = { clicks: 0, impressions: 0, ctr: 0, avgPosition: 0, queryCount: 0 };
      }
      
      grouped[item.page].clicks += item.clicks;
      grouped[item.page].impressions += item.impressions;
      grouped[item.page].avgPosition += item.position;
      grouped[item.page].queryCount += 1;
    }
    
    // Calculate averages
    for (const page of Object.keys(grouped)) {
      const pageData = grouped[page];
      pageData.ctr = pageData.impressions > 0 ? pageData.clicks / pageData.impressions : 0;
      pageData.avgPosition = pageData.queryCount > 0 ? pageData.avgPosition / pageData.queryCount : 100;
    }
    
    return grouped;
  };

  // Step 3: Get top query for a specific page
  const getTopQueryForPage = async (pageUrl: string, dateRange: { startDate: string; endDate: string }, gscProperty: string): Promise<string> => {
    try {
      const queryData = await gscService.fetchSearchAnalyticsData({
        siteUrl: gscProperty,
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        dimensions: ['page', 'query'],
        rowLimit: 1000,
        dimensionFilterGroups: [{
          filters: [{
            dimension: 'page',
            operator: 'equals',
            expression: pageUrl
          }]
        }]
      });

      if (queryData.length === 0) return 'No data available';
      
      // Find query with highest clicks for this page
      const topQuery = queryData.reduce((best, current) => 
        current.clicks > best.clicks ? current : best
      );
      
      return topQuery.query || 'Unknown query';
    } catch (error) {
      console.error('Error fetching top query for page:', pageUrl, error);
      return 'Error fetching query';
    }
  };

  // Step 4: Generate weekly performance trend data
  const getWeeklyTrendData = async (pageUrl: string, dateRange: { startDate: string; endDate: string }, gscProperty: string): Promise<WeeklyTrendData[]> => {
    try {
      const trendData = await gscService.fetchSearchAnalyticsData({
        siteUrl: gscProperty,
        startDate: dateRange.startDate,
        endDate: dateRange.endDate,
        dimensions: ['page', 'date'],
        rowLimit: 5000,
        dimensionFilterGroups: [{
          filters: [{
            dimension: 'page',
            operator: 'equals',
            expression: pageUrl
          }]
        }]
      });
      
      // Group by weeks
      const startDate = new Date(dateRange.startDate);
      const endDate = new Date(dateRange.endDate);
      const weeks = eachWeekOfInterval({ start: startDate, end: endDate }, { weekStartsOn: 1 });

      const weeklyData: WeeklyTrendData[] = weeks.map(weekStart => {
        const weekEnd = endOfWeek(weekStart, { weekStartsOn: 1 });
        const weekLabel = `${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d')}`;

        // Filter data for this week
        const weekData = trendData.filter(item => {
          if (!item.date) return false;
          const itemDate = new Date(item.date);
          return itemDate >= weekStart && itemDate <= weekEnd;
        });

        // Aggregate weekly metrics
        const totalClicks = weekData.reduce((sum, item) => sum + item.clicks, 0);
        const totalImpressions = weekData.reduce((sum, item) => sum + item.impressions, 0);
        const avgCtr = totalImpressions > 0 ? totalClicks / totalImpressions : 0;
        const avgPosition = weekData.length > 0 
          ? weekData.reduce((sum, item) => sum + item.position, 0) / weekData.length 
          : 0;

        return {
          weekLabel,
          clicks: totalClicks,
          ctr: avgCtr,
          avgPosition
        };
    });

      return weeklyData;
    } catch (error) {
      console.error('Error fetching weekly trend data for page:', pageUrl, error);
      return [];
    }
  };

  // Step 5: Generate AI-powered success patterns
  const generateAISuccessPatterns = async (topPages: TopGainerPage[]) => {
    setAiPatterns(prev => ({ ...prev, loading: true }));
    
    try {
      const pagesData = topPages.map(page => ({
        url: page.url,
        pageType: page.pageType,
        topQuery: page.topQuery,
        clicksGained: page.clicksGained,
        ctrImprovement: page.ctrImprovement,
        positionChange: page.positionChange,
        currentCtr: page.currentMetrics.ctr,
        currentPosition: page.currentMetrics.avgPosition
      }));

      const prompt = `Based on the following SEO performance data for top gaining pages, infer possible reasons for why these pages gained traffic. Suggest patterns such as improved title alignment, stronger search intent match, added structured content, or increased topical authority.

Top Gaining Pages Data:
${JSON.stringify(pagesData, null, 2)}

Provide your analysis in the following JSON format:
{
  "patterns": [
    "Pattern 1 explanation with specific insights",
    "Pattern 2 explanation with specific insights", 
    "Pattern 3 explanation with specific insights"
  ],
  "nextSteps": [
    "Actionable recommendation 1",
    "Actionable recommendation 2",
    "Actionable recommendation 3"
  ]
}

Focus on actionable, human-readable insights that can be applied to other pages. Look for common characteristics among the gaining pages.`;

      const response = await openAIService.generateText(prompt);
      
      try {
        const parsed = JSON.parse(response);
        setAiPatterns({
          patterns: parsed.patterns || [],
          nextSteps: parsed.nextSteps || [],
          loading: false
        });
      } catch (parseError) {
        // Fallback if JSON parsing fails
        setAiPatterns({
          patterns: [
            'Strong content-search intent alignment appears to be driving traffic growth',
            'Pages with improved meta titles and descriptions show better CTR performance',
            'Technical SEO improvements may have contributed to ranking gains'
          ],
          nextSteps: [
            'Apply successful title optimization patterns to similar pages',
            'Review and improve meta descriptions on underperforming pages',
            'Conduct technical SEO audit on pages with similar content themes'
          ],
          loading: false
        });
      }
    } catch (error) {
      console.error('Error generating AI success patterns:', error);
      
      // Enhanced error handling for rate limits
      if (error.message?.includes('RATE_LIMIT_EXCEEDED')) {
        setAiPatterns({
          patterns: [
            '🚫 OpenAI Rate Limit Reached - Using Data-Driven Insights Instead:',
            `Top gaining pages show an average CTR improvement of ${topPages.length > 0 ? (topPages.reduce((sum, p) => sum + p.ctrImprovement, 0) / topPages.length * 100).toFixed(2) : 0}%`,
            `Most common page type gaining traffic: ${getMostCommonPageType(topPages)}`,
            `Average position improvement: ${topPages.length > 0 ? (topPages.reduce((sum, p) => sum + p.positionChange, 0) / topPages.length).toFixed(1) : 0} positions`,
            'Pages with higher CTR improvements tend to have stronger ranking gains'
          ],
          nextSteps: [
            'Focus optimization efforts on similar page types that are already performing well',
            'Review meta descriptions and titles for pages with high impressions but lower CTR',
            'Check your OpenAI API usage at https://platform.openai.com/usage',
            'Consider upgrading your OpenAI plan or wait for rate limits to reset',
            'Manual analysis: Look for common content themes among your top gaining pages'
          ],
          loading: false
        });
      } else {
        setAiPatterns({
          patterns: [
            'Unable to generate AI-powered success patterns at this time',
            'Data-driven insights: Focus on pages showing consistent click growth',
            'Review your top-performing queries and optimize similar content'
          ],
          nextSteps: [
            'Manual review: Analyze common characteristics of gaining pages',
            'Check API connectivity and try again later',
            'Focus on the weekly trend data to identify patterns'
          ],
          loading: false
        });
      }
    }
  };

  // Helper function to get most common page type
  const getMostCommonPageType = (pages: TopGainerPage[]): string => {
    const typeCounts = pages.reduce((acc, page) => {
      acc[page.pageType] = (acc[page.pageType] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return Object.entries(typeCounts)
      .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Mixed';
  };

  // Handle page selection
  const handlePageSelection = (url: string, selected: boolean) => {
    setTopGainerPages(prev => prev.map(page => 
      page.url === url ? { ...page, selected } : page
    ));
  };

  // Export functions
  const exportToCSV = async () => {
    if (!await trackExport('top_gainers_csv')) return;
    
    try {
      const exportService = new ExportService(user?.id || '', subscriptionType || 'free');
      
      const csvData = topGainerPages.map(page => ({
        URL: page.url,
        'Page Type': page.pageType,
        'Top Query': page.topQuery,
        'Clicks Gained': page.clicksGained,
        'CTR Improvement': `${(page.ctrImprovement * 100).toFixed(2)}%`,
        'Position Change': page.positionChange.toFixed(1),
        'Current Clicks': page.currentMetrics.clicks,
        'Current CTR': `${(page.currentMetrics.ctr * 100).toFixed(2)}%`,
        'Current Position': page.currentMetrics.avgPosition.toFixed(1)
      }));
      
      const csvContent = csvData.map(row => 
        Object.values(row).map(value => `"${value}"`).join(',')
      ).join('\n');
      
      const headers = Object.keys(csvData[0] || {}).map(header => `"${header}"`).join(',');
      const fullCsv = headers + '\n' + csvContent;
      
      const filename = `top_gainers_report_${new Date().toISOString().split('T')[0]}.csv`;
      const blob = new Blob([fullCsv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      link.click();
      
      toast({
        title: "Export Successful",
        description: "Top Gainers report exported to CSV",
      });
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Export Failed",
        description: "Failed to export report. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Load data when component becomes active
  useEffect(() => {
    if (isActive) {
      loadTopGainersData();
    }
  }, [isActive]);

  if (loading) {
    return (
      <DataLoadingOverlay
        progress={progress}
        title="Generating Top Gainers SEO Report"
        subtitle={progressMessage}
        isVisible={true}
      />
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-white mb-2">Error Loading Report</h3>
          <p className="text-gray-400 mb-4">{error}</p>
          <Button onClick={loadTopGainersData}>
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full p-6 space-y-6">
      {/* Header */}
            <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Enhanced Top Gainers SEO Report 🚀</h1>
          <p className="text-gray-400 mt-1">
            Advanced analysis: Pages with significant click growth (last 3 months vs previous 3 months)
          </p>
        </div>
          
          <div className="flex gap-2">
          <Button variant="outline" onClick={exportToCSV} disabled={topGainerPages.length === 0}>
              <Download className="h-4 w-4 mr-2" />
              Export CSV
            </Button>
          <Button onClick={loadTopGainersData} disabled={loading}>
            <Activity className="h-4 w-4 mr-2" />
            Refresh Data
            </Button>
        </div>
      </div>

      {/* Summary Section */}
      {summary && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <FileText className="h-5 w-5 text-blue-400" />
              Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400">{summary.totalGainerPages}</div>
                <div className="text-sm text-gray-400">Gainer Pages</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-400">{summary.netClicksGained.toLocaleString()}</div>
                <div className="text-sm text-gray-400">Net Clicks Gained</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-400">
                  {summary.avgCtrImprovement > 0 ? '+' : ''}{(summary.avgCtrImprovement * 100).toFixed(2)}%
            </div>
                <div className="text-sm text-gray-400">Avg CTR Improvement</div>
              </div>
              <div className="text-center">
                <div className="text-xs text-green-400 font-medium">TOP GAINING PAGE</div>
                {summary.topGainingPage && (
                  <>
                    <div className="text-sm font-medium text-white truncate">
                      {summary.topGainingPage.pageType}
                    </div>
                    <div className="text-xs text-gray-400">
                      +{summary.topGainingPage.clicksGained} clicks
            </div>
                  </>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Top Gainers Table */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white">Top Gainers Table</CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[500px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12">Select</TableHead>
                  <TableHead>Page URL</TableHead>
                  <TableHead>Page Type</TableHead>
                  <TableHead>Clicks Gained</TableHead>
                  <TableHead>CTR Improvement</TableHead>
                  <TableHead>Position Change</TableHead>
                  <TableHead>Top Query</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {topGainerPages.map((page, index) => (
                  <TableRow key={page.url}>
                    <TableCell>
                      <Checkbox
                        checked={page.selected}
                        onCheckedChange={(checked) => 
                          handlePageSelection(page.url, checked as boolean)
                        }
                      />
                    </TableCell>
                    <TableCell>
                      <a
                        href={page.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-400 hover:text-blue-300 flex items-center gap-1"
                      >
                        <span className="truncate max-w-[300px]">{page.url}</span>
                        <ExternalLink className="h-3 w-3" />
                      </a>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">{page.pageType}</Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant="default" className="bg-green-600">
                        +{page.clicksGained}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant={page.ctrImprovement > 0 ? "default" : "destructive"}>
                        {page.ctrImprovement > 0 ? '+' : ''}{(page.ctrImprovement * 100).toFixed(2)}%
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant={page.positionChange > 0 ? "default" : "secondary"}>
                        {page.positionChange > 0 ? '+' : ''}{page.positionChange.toFixed(1)}
                      </Badge>
                    </TableCell>
                    <TableCell className="max-w-[200px] truncate">
                      {page.topQuery}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </ScrollArea>
        </CardContent>
      </Card>

      {/* Weekly Trend Data for Top 5 Pages */}
      {topPages.length > 0 && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <BarChart3 className="h-5 w-5 text-blue-400" />
              Weekly Performance Trends (Top 5 Pages)
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {topPages.map((page, index) => (
                page.weeklyTrendData.length > 0 && (
                  <div key={page.url}>
                    <h4 className="text-sm font-medium text-white mb-3">
                      {index + 1}. {page.pageType} (+{page.clicksGained} clicks)
                    </h4>
                    <div className="h-64">
                      <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={page.weeklyTrendData}>
                          <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                          <XAxis dataKey="weekLabel" tick={{fontSize: 12}} stroke="#9CA3AF" />
                          <YAxis yAxisId="left" orientation="left" stroke="#9CA3AF" />
                          <YAxis yAxisId="right" orientation="right" stroke="#9CA3AF" />
                          <Tooltip 
                            contentStyle={{ 
                              backgroundColor: '#1F2937', 
                              border: '1px solid #374151',
                              borderRadius: '6px'
                            }}
                          />
                          <Line 
                            yAxisId="left"
                            type="monotone" 
                            dataKey="clicks" 
                            stroke="#3B82F6" 
                            strokeWidth={2}
                            name="Clicks"
                          />
                          <Line 
                            yAxisId="left"
                            type="monotone" 
                            dataKey="ctr" 
                            stroke="#10B981" 
                            strokeWidth={2}
                            name="CTR"
                          />
                          <Line 
                            yAxisId="right"
                            type="monotone" 
                            dataKey="avgPosition" 
                            stroke="#F59E0B" 
                            strokeWidth={2}
                            name="Avg Position"
                          />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                            </div>
                )
              ))}
                        </div>
          </CardContent>
        </Card>
      )}

      {/* AI Inferred Success Patterns */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Bot className="h-5 w-5 text-purple-400" />
            AI Inferred Success Patterns
          </CardTitle>
        </CardHeader>
        <CardContent>
          {aiPatterns.loading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-blue-400" />
              <span className="ml-3 text-gray-300">Analyzing success patterns...</span>
            </div>
          ) : (
            <div className="space-y-6">
              <div>
                <h4 className="text-sm font-medium text-white mb-3 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4 text-yellow-400" />
                  Identified Success Patterns
                </h4>
                <ul className="space-y-2">
                  {aiPatterns.patterns.map((pattern, index) => (
                    <li key={index} className="flex items-start gap-2 text-gray-300">
                      <span className="text-green-400 mt-1">•</span>
                      {pattern}
                    </li>
                  ))}
                </ul>
              </div>
              
              <Separator className="bg-gray-600" />
              
              <div>
                <h4 className="text-sm font-medium text-white mb-3 flex items-center gap-2">
                  <Target className="h-4 w-4 text-blue-400" />
                  Next Steps Recommendations
                </h4>
                <ul className="space-y-2">
                  {aiPatterns.nextSteps.map((step, index) => (
                    <li key={index} className="flex items-start gap-2 text-gray-300">
                      <span className="text-blue-400 mt-1">{index + 1}.</span>
                      {step}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Empty State */}
      {topGainerPages.length === 0 && !loading && (
        <Card className="bg-gray-800 border-gray-700">
          <CardContent className="p-8 text-center">
            <TrendingUp className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-white mb-2">No Top Gainers Found</h3>
            <p className="text-gray-400 mb-4">
              No pages found with positive click growth in the selected time period.
            </p>
            <Button onClick={loadTopGainersData}>
              Refresh Data
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default TopGainersContent; 